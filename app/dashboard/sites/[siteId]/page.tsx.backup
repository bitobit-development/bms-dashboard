'use client'

import { useCallback } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from '@/components/ui/breadcrumb'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Skeleton } from '@/components/ui/skeleton'
import { Alert, AlertDescription } from '@/components/ui/alert'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { BatteryGauge } from '@/components/dashboard/battery-gauge'
import { PowerFlow } from '@/components/dashboard/power-flow'
import { EnergyFlowDiagram } from '@/components/dashboard/energy-flow-arrows'
import { BatteryHistoryChart } from '@/components/charts/battery-history-chart'
import { SolarLoadChart } from '@/components/charts/solar-load-chart'
import { useRealtimeData } from '@/hooks/use-realtime-data'
import { getSiteById, getSiteHistory, getLatestTelemetry } from '@/app/actions/sites'
import { RefreshCw, MapPin, AlertCircle, CheckCircle, XCircle, Clock } from 'lucide-react'
import { formatDistanceToNow, format } from 'date-fns'

export default function SiteDetailPage() {
  const params = useParams()
  const router = useRouter()
  const siteId = parseInt(params.siteId as string)

  const fetchSiteData = useCallback(async () => {
    const site = await getSiteById(siteId)
    if (!site) {
      throw new Error('Site not found')
    }
    return site
  }, [siteId])

  const fetchHistoryData = useCallback(async () => {
    return await getSiteHistory(siteId, 7)
  }, [siteId])

  const {
    data: site,
    isLoading: siteLoading,
    error: siteError,
    lastUpdated,
    refresh,
  } = useRealtimeData(fetchSiteData, 60000)

  const {
    data: history,
    isLoading: historyLoading,
  } = useRealtimeData(fetchHistoryData, 300000) // Refresh every 5 minutes

  if (siteError) {
    return (
      <div className="space-y-6">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink asChild>
                <Link href="/dashboard">Dashboard</Link>
              </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>Error</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            {siteError.message === 'Site not found' ? 'Site not found' : 'Failed to load site data'}
          </AlertDescription>
        </Alert>
        <Button onClick={() => router.push('/dashboard')}>Back to Dashboard</Button>
      </div>
    )
  }

  if (siteLoading || !site) {
    return (
      <div className="space-y-6">
        <Skeleton className="h-6 w-64" />
        <Skeleton className="h-96 w-full" />
      </div>
    )
  }

  const latestReading = site.latestReading
  const isOnline = site.lastSeenAt && Date.now() - new Date(site.lastSeenAt).getTime() < 10 * 60 * 1000

  return (
    <div className="space-y-6">
      {/* Breadcrumb */}
      <Breadcrumb>
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink asChild>
              <Link href="/dashboard">Dashboard</Link>
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>{site.name}</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>

      {/* Header */}
      <div className="flex items-start justify-between">
        <div className="space-y-2">
          <div className="flex items-center gap-3">
            <h1 className="text-3xl font-bold">{site.name}</h1>
            <Badge variant={isOnline ? 'default' : 'secondary'} className={isOnline ? 'animate-pulse' : ''}>
              {isOnline ? 'Online' : site.status}
            </Badge>
          </div>
          {site.city && (
            <div className="flex items-center gap-1 text-muted-foreground">
              <MapPin className="h-4 w-4" />
              <span>
                {site.city}
                {site.state ? `, ${site.state}` : ''}
              </span>
            </div>
          )}
          {site.lastSeenAt && (
            <p className="text-sm text-muted-foreground">
              Last seen {formatDistanceToNow(new Date(site.lastSeenAt), { addSuffix: true })}
            </p>
          )}
        </div>
        <div className="flex items-center gap-4">
          {lastUpdated && (
            <span className="text-sm text-muted-foreground">
              Updated {formatDistanceToNow(lastUpdated, { addSuffix: true })}
            </span>
          )}
          <Button variant="outline" size="sm" onClick={refresh} disabled={siteLoading}>
            <RefreshCw className={`h-4 w-4 mr-2 ${siteLoading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
        </div>
      </div>

      {/* Tabs */}
      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="history">History</TabsTrigger>
          <TabsTrigger value="equipment">Equipment</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            {/* Battery Gauge Card */}
            <Card>
              <CardHeader>
                <CardTitle>Battery Status</CardTitle>
                <CardDescription>Current battery charge level and health</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-center gap-6">
                <BatteryGauge
                  level={latestReading?.batteryChargeLevel || 0}
                  size="lg"
                  showLabel={false}
                />
                <div className="grid grid-cols-2 gap-4 w-full text-sm">
                  <div>
                    <span className="text-muted-foreground">Voltage:</span>
                    <span className="ml-2 font-semibold">
                      {latestReading?.batteryVoltage?.toFixed(1) || '0'} V
                    </span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">Current:</span>
                    <span className="ml-2 font-semibold">
                      {latestReading?.batteryCurrent?.toFixed(1) || '0'} A
                    </span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">Temperature:</span>
                    <span className="ml-2 font-semibold">
                      {latestReading?.batteryTemperature?.toFixed(1) || '0'}Â°C
                    </span>
                  </div>
                  <div>
                    <span className="text-muted-foreground">Health:</span>
                    <span className="ml-2 font-semibold">
                      {latestReading?.batteryStateOfHealth?.toFixed(0) || '0'}%
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Energy Flow Diagram */}
            <Card>
              <CardHeader>
                <CardTitle>Energy Flow</CardTitle>
                <CardDescription>Real-time power distribution</CardDescription>
              </CardHeader>
              <CardContent>
                <EnergyFlowDiagram
                  telemetry={{
                    solarPowerKw: latestReading?.solarPowerKw || 0,
                    batteryPowerKw: latestReading?.batteryPowerKw || 0,
                    loadPowerKw: latestReading?.loadPowerKw || 0,
                    gridImportKw: (latestReading?.gridPowerKw || 0) > 0 ? latestReading?.gridPowerKw || 0 : 0,
                    gridExportKw: (latestReading?.gridPowerKw || 0) < 0 ? Math.abs(latestReading?.gridPowerKw || 0) : 0,
                    batteryChargeLevel: latestReading?.batteryChargeLevel || 0,
                  }}
                />
              </CardContent>
            </Card>
          </div>

          {/* Equipment Status Grid */}
          <Card>
            <CardHeader>
              <CardTitle>Equipment Status</CardTitle>
              <CardDescription>Real-time status of all equipment</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid gap-4 md:grid-cols-2">
                <EquipmentStatusItem
                  label="Inverter 1"
                  power={latestReading?.inverter1PowerKw || 0}
                  status="operational"
                />
                <EquipmentStatusItem
                  label="Inverter 2"
                  power={latestReading?.inverter2PowerKw || 0}
                  status="operational"
                />
                <EquipmentStatusItem
                  label="Solar Capacity"
                  power={site.solarCapacityKw || 0}
                  status="operational"
                  isCapacity
                />
                <EquipmentStatusItem
                  label="Battery Capacity"
                  power={site.batteryCapacityKwh || 0}
                  status="operational"
                  isCapacity
                  unit="kWh"
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* History Tab */}
        <TabsContent value="history" className="space-y-6">
          {historyLoading ? (
            <div className="space-y-6">
              <Skeleton className="h-96 w-full" />
              <Skeleton className="h-96 w-full" />
            </div>
          ) : history && history.length > 0 ? (
            <div className="space-y-6">
              <BatteryHistoryChart data={history} />
              <SolarLoadChart data={history} />
            </div>
          ) : (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-12">
                <Clock className="h-12 w-12 text-muted-foreground mb-4" />
                <p className="text-lg font-medium mb-2">No historical data</p>
                <p className="text-sm text-muted-foreground">
                  Historical data will appear here once it's collected
                </p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        {/* Equipment Tab */}
        <TabsContent value="equipment">
          <Card>
            <CardHeader>
              <CardTitle>Equipment List</CardTitle>
              <CardDescription>All equipment installed at this site</CardDescription>
            </CardHeader>
            <CardContent>
              {site.equipment && site.equipment.length > 0 ? (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Name</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Manufacturer</TableHead>
                      <TableHead>Model</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead className="text-right">Capacity</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {site.equipment.map((equip) => (
                      <TableRow key={equip.id}>
                        <TableCell className="font-medium">{equip.name}</TableCell>
                        <TableCell className="capitalize">{equip.type.replace('_', ' ')}</TableCell>
                        <TableCell>{equip.manufacturer || '-'}</TableCell>
                        <TableCell>{equip.model || '-'}</TableCell>
                        <TableCell>
                          <Badge
                            variant={
                              equip.status === 'operational'
                                ? 'default'
                                : equip.status === 'degraded'
                                ? 'secondary'
                                : 'destructive'
                            }
                          >
                            {equip.status}
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          {equip.capacity ? `${equip.capacity} ${equip.type === 'battery' ? 'kWh' : 'kW'}` : '-'}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <div className="flex flex-col items-center justify-center py-12">
                  <p className="text-muted-foreground">No equipment registered for this site</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

interface EquipmentStatusItemProps {
  label: string
  power: number
  status: 'operational' | 'degraded' | 'failed'
  isCapacity?: boolean
  unit?: string
}

function EquipmentStatusItem({ label, power, status, isCapacity, unit = 'kW' }: EquipmentStatusItemProps) {
  const StatusIcon = status === 'operational' ? CheckCircle : status === 'degraded' ? AlertCircle : XCircle
  const statusColor =
    status === 'operational'
      ? 'text-green-600'
      : status === 'degraded'
      ? 'text-yellow-600'
      : 'text-red-600'

  return (
    <div className="flex items-center justify-between p-4 border rounded-lg">
      <div className="flex items-center gap-3">
        <StatusIcon className={`h-5 w-5 ${statusColor}`} />
        <div>
          <div className="font-medium">{label}</div>
          <div className="text-sm text-muted-foreground capitalize">{status}</div>
        </div>
      </div>
      <div className="text-right">
        <div className="text-lg font-semibold">{power.toFixed(1)}</div>
        <div className="text-xs text-muted-foreground">{unit} {isCapacity ? 'capacity' : 'current'}</div>
      </div>
    </div>
  )
}
